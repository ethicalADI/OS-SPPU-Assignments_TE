#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

void sort(int arr[], int size) {
    int temp;
    for (int i = 0; i < size; i++) {
        for (int j = i + 1; j < size; j++) {
            if (arr[i] > arr[j]) {
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
}


int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);

    // Create a child process
    pid_t pid = fork();

    if (pid < 0) {
        printf("Fork failed.\n");
        return 1;
    }

    if (pid > 0) { // Parent process
        printf("Parent process (PID: %d)\n", getpid());
        printf("Before sorting: ");
        for (int i = 0; i < n; i++)
            printf("%d ", arr[i]);
        printf("\n");

        sort(arr, n);

        printf("After  Sort: ");
        for (int i = 0; i < n; i++)
            printf("%d ", arr[i]);
        printf("\n");

         printf("parent process (PID: %d) sleeping...\n", getpid());
        sleep(10); // Sleep for 10 seconds to create a zombie process
         printf("parent process (PID: %d) sleeping...\n", getpid());
        wait(NULL); // Wait for the child process to finish

    } else { // Child process
        printf("Child process (PID: %d)\n", getpid());
        printf("Before sorting: ");
        for (int i = 0; i < n; i++)
            printf("%d ", arr[i]);
        printf("\n");

        sort(arr, n);

        printf("After  Sort: ");
        for (int i = 0; i < n; i++)
            printf("%d ", arr[i]);
        printf("\n");

        printf("Child process (PID: %d) sleeping...\n", getpid());
        sleep(5); // Sleep for 5 seconds to create an orphan process
         printf("Child process (PID: %d) sleeping...\n", getpid());
    }

    return 0;
}
