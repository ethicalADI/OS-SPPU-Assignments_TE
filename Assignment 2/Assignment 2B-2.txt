#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/wait.h>


void sort(int arr[], int size) {
    int temp;
    for (int i = 0; i < size; i++) {
        for (int j = i + 1; j < size; j++) {
            if (arr[i] > arr[j]) {
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
}


int main(){
   printf("\n This is the main process: ");
   printf("\n Process Id: %d",getpid());
   printf("\n Parent Id: %d",getppid());
   int n;
   printf("\n ENTER THE SIZE OF ARRAY ");
   scanf("%d",&n);
   int a[n];
   for(int i=0;i<n;i++){
      printf("ENTER THE a%d ELEMENT\n ",i);
      scanf("%d",&a[i]);
   }
   printf("SORTING ARRAY USING SORT");
   sort(a,n);
   printf("\n FORKING THE MAIN PROCESS");
   pid_t pid=fork();

   if(pid>0){
     printf("\n PARENT IS RUNNING WITH IT ID:%d ",getppid());
     printf("\n PARENT IS WAITING TO COMPLETE CHILD PROCESS");
     wait(NULL);
     printf("\n PARNET IS EXITING ");
   }
   else if(pid==0)
   {
      char *args[n+3];
      args[0]="./child";
      for(int i=0;i<n;i++)
      {   args[i+1]=malloc(10);
         sprintf(args[i+1],"%d",a[i]);
      }
      int x;
      printf("\n ENTER THE SEARCH ELEMENT\n");
      scanf("%d",&x);
      args[n+1]=malloc(10);
      sprintf(args[n+1],"%d",x);
      args[n+2]=NULL;
      printf("\n CHILD IS CALLING EXCEVE CALL\n");
      execve(args[0],args,NULL);
   }
}









