#include<stdlib.h>
#include <stdio.h>

void sjfScheduling() {
    int arrival_time[10], burst_time[10], temp[10];
    int i,n, smallest, count = 0, time,end;
    double wait_time = 0, turnaround_time = 0;
    float average_waiting_time, average_turnaround_time;

    printf("Enter the Total Number of Processes: ");
    scanf("%d", &n);
   

       for (i = 0; i <n; i++) {
        printf("\nEnter the Arrival and Burst time of Process[%d]\n", i + 1);
        printf("Arrival time is: ");
        scanf("%d", &arrival_time[i]);
        printf("Burst time is: ");
        scanf("%d", &burst_time[i]);
        temp[i] = burst_time[i];
    }

    burst_time[9] = 9999;
    
    for (time = 0; count != n; time++) 
    {
        smallest = 9;
        for (i = 0; i < n; i++)
         {if (arrival_time[i] <= time && burst_time[i] < burst_time[smallest] && burst_time[i] > 0) 
            {
                smallest = i;
            }
        }

        burst_time[smallest]--;

        if (burst_time[smallest] == 0) 
        {
            count++;
            end = time + 1;
            wait_time = wait_time + end - arrival_time[smallest] - temp[smallest];
            turnaround_time = turnaround_time + end - arrival_time[smallest];
        }
    }

    average_waiting_time = wait_time / n;
    average_turnaround_time = turnaround_time / n;

    printf("\nAverage Waiting Time: %lf\n", average_waiting_time);
    printf("Average Turnaround Time: %lf\n", average_turnaround_time);
}

void roundRobinScheduling() {
    int arrival_time[10], burst_time[10], temp[10];
    int i,n, sum = 0, count = 0, y, quantum;
    double wait_time = 0, turnaround_time = 0;
    float average_waiting_time, average_turnaround_time;
   

    printf("Total number of processes in the system: ");
    scanf("%d", &n);
    y = n;

    for (i = 0; i <n; i++) {
        printf("\nEnter the Arrival and Burst time of Process[%d]\n", i + 1);
        printf("Arrival time is: ");
        scanf("%d", &arrival_time[i]);
        printf("Burst time is: ");
        scanf("%d", &burst_time[i]);
        temp[i] = burst_time[i];
    }

    printf("Enter the Time Quantum for the processes: ");
    scanf("%d", &quantum);

    for (sum = 0, i = 0; y != 0;) 
    {
        if (temp[i] <= quantum && temp[i] > 0) {
            sum = sum + temp[i];
            temp[i] = 0;
            count = 1;
        } 
        else if (temp[i] > 0) 
        {
            temp[i] = temp[i] - quantum;
            sum = sum + quantum;
        }

        if (temp[i] == 0 && count == 1) 
        {
            y--;
            wait_time = wait_time + sum - arrival_time[i] - burst_time[i];
            turnaround_time = turnaround_time + sum - arrival_time[i];
            count = 0;
        }

        if (i == n - 1) 
        {
            i = 0;
        } 
        else if (arrival_time[i + 1] <= sum)
         {
            i++;
        } 
        else 
        {
            i = 0;
        }
    }
    average_waiting_time = wait_time / n;
    average_turnaround_time = turnaround_time / n;

    printf("\nAverage Waiting Time: %lf\n", average_waiting_time);
    printf("Average Turnaround Time: %lf\n", average_turnaround_time);
}


int main()
{
    int choice;
    while(1)
    {
        printf("\nDisk Scheduling Alogrithms\n1.Shortest Job First (SJF)\n2.Round Robin (RR)\n3.Exit\nEnter your choice:");
        scanf("%d",&choice);
        switch(choice)
        {
        case 1:
             sjfScheduling();
            break;
        case 2:
           roundRobinScheduling();
            break;
       
        default:
            return 0;
            break;
        }
    }
}
